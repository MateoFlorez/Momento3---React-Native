import { StyleSheet, Text, View, TouchableOpacity, Button } from "react-native";
import { useForm, Controller } from "react-hook-form";
import { useState, useRef } from "react";
import { TextInput } from "react-native-web";

export default function App() {
  const {
    control,
    handleSubmit,
    formState: { errors },
  } = useForm({
    defaultValues: {
      identificacion: "",
      nombre: "",
      correo: "",
      totalComision: "",
    },
  });

  // Metodo para capturar los datos - onSubmit
  // const onSubmit = (data) => console.log(data);

  const [identificacion, setIdentificacion] = useState("");
  const [nombre, setNombre] = useState("");
  const [correo, setCorreo] = useState("");
  const [totalComision, setTotalComision] = useState("");
  const [registros, setRegistros] = useState([]);

  // Referencia a elementos
  let refIdentificacion = useRef();

  const guardar = () => {
    // Agregar datos al array
    setRegistros((miregistros) => [
      ...miregistros,
      {
        identificacion: identificacion,
        nombre: nombre,
        correo: correo,
        totalComision: totalComision,
      },
    ]);
    refIdentificacion.current.focus();
  };

  let limpiar = () => {
    setIdentificacion("");
    setNombre("");
    setCorreo("");
    setTotalComision("");
    refIdentificacion.current.focus();
  };

  let buscar = (idenbuscar) => {
    let idenc = registros.find((reg) => reg.identificacion == identificacion);
    if (idenc != undefined) {
      setNombre(idenc.nombre);
      setCorreo(idenc.correo);
      setTotalComision(idenc.totalComision);
    } else {
      alert("No se encontraron datos");
    }
  };

  return (
    <View style={styles.container}>
      <Controller
        control={control}
        rules={{
          required: true,
          pattern: /^[0-9]*(\.?)[ 0-9]+$/,
          maxLength: 11,
          minLength: 9,
        }}
        render={({ field: { onChange, onBlur, identificacion } }) => (
          <TextInput
            style={styles.inputs}
            placeholder="Id"
            onChange={(identificacion) => onChange}
            onBlur={onBlur}
            value={identificacion}
            ref={refIdentificacion}
          />
        )}
        name="identificacion"
      />
      {errors.identificacion?.type == "required" && (
        <Text style={{ color: "red" }}>Este campo es obligatorio</Text>
      )}
      {errors.identificacion?.type == "pattern" && (
        <Text style={{ color: "red" }}>
          Este campo debe contener solo números
        </Text>
      )}
      {errors.identificacion?.type == "maxLength" && (
        <Text style={{ color: "red" }}>Maximo 11 caracteres</Text>
      )}
      {errors.identificacion?.type == "minLength" && (
        <Text style={{ color: "red" }}>Minimo 9 caracteres</Text>
      )}

      <Controller
        control={control}
        rules={{
          required: true,
          pattern: /^[A-Za-zÑñáóéíú ]+$/i,
          maxLength: 25,
          minLength: 5,
        }}
        render={({ field: { onChange, onBlur, nombre } }) => (
          <TextInput
            style={styles.inputs}
            placeholder="Nombre completo"
            onChangeText={onChange}
            onBlur={onBlur}
            value={nombre}
          />
        )}
        name="nombre"
      />
      {errors.nombre?.type == "required" && (
        <Text style={{ color: "red" }}>Este campo es obligatorio</Text>
      )}
      {errors.nombre?.type == "pattern" && (
        <Text style={{ color: "red" }}>
          Solo debe contener letras y/o espacios
        </Text>
      )}
      {errors.nombre?.type == "maxLength" && (
        <Text style={{ color: "red" }}>No debe pasar los 25 caracteres</Text>
      )}
      {errors.nombre?.type == "minLength" && (
        <Text style={{ color: "red" }}>Debe tener minimo 5 caracteres</Text>
      )}
      {/* Campo email */}
      <Controller
        control={control}
        rules={{
          required: true,
          pattern: /^\w+([.-_+]?\w+)*@\w+([.-]?\w+)*(\.\w{2,10})+$/,
        }}
        render={({ field: { onChange, onBlur, correo } }) => (
          <TextInput
            style={styles.inputs}
            placeholder="Email"
            onChange={onChange}
            onBlur={onBlur}
            value={correo}
          />
        )}
        name="correo"
      />
      {errors.correo?.type == "required" && (
        <Text style={{ color: "red" }}>Este campo es obligatorio</Text>
      )}
      {errors.correo?.type == "pattern" && (
        <Text style={{ color: "red" }}>
          Ingrese un correo electronico válido
        </Text>
      )}
      <Controller
        control={control}
        rules={{
          pattern: /^[0-9]*(\.?)[ 0-9]+$/,
        }}
        render={({ field: { onChange, onBlur, totalComision } }) => (
          <TextInput
            style={styles.inputs}
            placeholder="Total Comision"
            onChange={onChange}
            onBlur={onBlur}
            value={totalComision}
          />
        )}
        name="totalComision"
      />
      {errors.totalComision?.type == "pattern" && (
        <Text style={{ color: "red" }}>
          Este campo debe contener solo números
        </Text>
      )}
      {errors.totalComision?.type == "max" && (
        <Text style={{ color: "red" }}>Maximo 11 caracteres</Text>
      )}
      {errors.totalComision?.type == "min" && (
        <Text style={{ color: "red" }}>Minimo 9 caracteres</Text>
      )}

      <TouchableOpacity
        style={{
          backgroundColor: "green",
          padding: 6,
          borderRadius: 5,
          marginTop: 20,
        }}
        onPress={guardar}
      >
        <Text style={{ color: "white" }}>Enviar</Text>
      </TouchableOpacity>
      <View>
        <Button title="Guardar" color="green" onPress={guardar} />
        <Button title="Buscar" color="green" onPress={buscar} />
        <Button title="Limpiar" color="green" onPress={limpiar} />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
  },
  inputs: {
    padding: 10,
    borderWidth: 1,
    borderColor: "green",
    textAlign: "center",
    borderRadius: 5,
    color: "black",
    marginBottom: 10,
  },
});


<View
      style={{
        flex: 1,
        padding: 24,
        alignItems: "center",
        backgroundColor: "#BCBCBC",
      }}
    >
      <TouchableOpacity
        style={[
          styles.buttons,
          { backgroundColor: "aqua", marginBottom: 50, width: 300 },
        ]}
        onPress={getClientes}
      >
        <Text style={{ fontSize: 22 }}>Listado</Text>
      </TouchableOpacity>

      <View style={{ alignItems: "center", marginBottom: 20 }}>
        <Text style={{ fontWeight: "bold" }}>Buscar Vendedor</Text>
        <TextInput
          style={[styles.inputs, { marginBottom: 30 }]}
          placeholder="Search by Id"
          onChangeText={(idsearch) => setIdsearch(idsearch)}
          value={idsearch}
        />
        <TextInput
          style={styles.inputs}
          value={nombre}
          placeholder="Nombre Completo"
          onChangeText={(nombre) => setNombre(nombre)}
        />
        <TextInput
          style={styles.inputs}
          value={correo}
          placeholder="Correo"
          onChangeText={(correo) => setCorreo(correo)}
        />
        <TextInput
          style={styles.inputs}
          value={totalComision}
          placeholder="Comision"
          onChangeText={(totalComision) => setTotalComision(totalComision)}
        />
      </View>

      <TouchableOpacity
        style={[
          styles.buttons,
          { backgroundColor: "#71BA31", marginBottom: 5, width: 200 },
        ]}
        onPress={() => saveCliente()}
      >
        <Text style={{ fontSize: 22, color: "white" }}>Guardar</Text>
      </TouchableOpacity>
      <TouchableOpacity
        style={[
          styles.buttons,
          { backgroundColor: "#71BA31", marginBottom: 5, width: 200 },
        ]}
        onPress={() => getClientById(idsearch)}
      >
        <Text style={{ fontSize: 22, color: "white" }}>Buscar</Text>
      </TouchableOpacity>
      <TouchableOpacity
        style={[
          styles.buttons,
          { backgroundColor: "#558CCF", marginBottom: 5, width: 200 },
        ]}
        onPress={() => updateCliente(idsearch)}
      >
        <Text style={{ fontSize: 22, color: "white" }}>Editar</Text>
      </TouchableOpacity>
      <TouchableOpacity
        style={[
          styles.buttons,
          { backgroundColor: "#D14842", marginBottom: 50, width: 200 },
        ]}
        onPress={() => deleteCliente(idsearch)}
      >
        <Text style={{ fontSize: 22, color: "white" }}>Eliminar</Text>
      </TouchableOpacity>

      {isLoading ? (
        <ActivityIndicator size="large" color="#000" />
      ) : (
        <FlatList
          data={data}
          keyExtractor={({ id }, index) => id}
          renderItem={({ item }) => (
            <TouchableOpacity
              style={[styles.buttons, { backgroundColor: "green" }]}
              onPress={() => {
                alert(item.nombre);
              }}
            >
              <Text style={{ color: "white", width: 200, textAlign: "center" }}>
                {item.nombre}, {item.correo}, {item.totalComision}
              </Text>
            </TouchableOpacity>
          )}
        />
      )}
    </View>